{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"graphql\"","webpack:///./src/utils/index.ts","webpack:///./src/plugin/parser/index.ts","webpack:///external \"lazy-get-decorator\"","webpack:///./src/plugin/parser/getDefinitions.ts","webpack:///external \"lodash.merge\"","webpack:///./src/plugin/printer/index.ts","webpack:///./src/plugin/printer/expandTemplate.ts","webpack:///./src/index.ts","webpack:///./src/plugin/index.ts","webpack:///./src/plugin/plugin.ts","webpack:///./src/plugin/parser/OperationsParser.ts","webpack:///./src/utils/errors.ts","webpack:///./src/utils/unionToArray.ts","webpack:///./src/utils/fromEntries.ts","webpack:///external \"object.fromentries\"","webpack:///./src/plugin/printer/config.ts","webpack:///external \"change-case\"","webpack:///external \"esprima\"","webpack:///external \"static-eval\"","webpack:///./src/plugin/printer/OperationsMapPrinter.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = require(\"graphql\");","export * from './types'\nexport * from './errors'\nexport * from './unionToArray'\nexport * from './fromEntries'\n","export * from './OperationsParser'\nexport * from './getDefinitions'\n","module.exports = require(\"lazy-get-decorator\");","import { ASTKindToNode, ASTNode, BREAK, DocumentNode, KindEnum, VariableDefinitionNode, visit } from 'graphql'\nimport { ERRORS } from '~/utils'\n\nconst filterDefinitions = <T extends KindEnum>(allAst: DocumentNode, kind: T): ASTKindToNode[T][] =>\n  allAst.definitions.filter(d => d.kind === kind) as ASTKindToNode[T][]\n\nexport const getVariablesAst = (node: ASTNode): VariableDefinitionNode | undefined => {\n  let variable: VariableDefinitionNode | undefined = undefined\n  visit(node, {\n    VariableDefinition: node => {\n      variable = node\n      return BREAK\n    },\n  })\n\n  return variable\n}\n\nexport const getFragments = (allAst: DocumentNode) => {\n  return filterDefinitions(allAst, 'FragmentDefinition').map(node => ({\n    node,\n    name: node.name.value,\n    onType: node.typeCondition.name.value,\n    kind: 'fragment' as const,\n  }))\n}\n\nexport const getOperations = (allAst: DocumentNode) => {\n  return filterDefinitions(allAst, 'OperationDefinition').map(node => ({\n    node: node,\n    name: node.name ? node.name.value : ERRORS.anonymousOperation(node),\n    kind: node.operation,\n    variables: getVariablesAst(node),\n  }))\n}\n\nexport type FragmentType = ReturnType<typeof getFragments>[0]\nexport type OperationType = ReturnType<typeof getOperations>[0]\nexport type DefinitionType = OperationType | FragmentType\n","module.exports = require(\"lodash.merge\");","export * from './config'\nexport { OperationsMapPrinter } from './OperationsMapPrinter'\n","import * as changeCase from 'change-case'\nimport { parse } from 'esprima'\nimport { OperationTypeNode } from 'graphql'\nimport evaluate from 'static-eval'\nimport { ERRORS, fromEntries } from '~/utils'\n\nconst casingOperations = (Object.keys(changeCase) as (keyof typeof changeCase)[])\n  .map(x => ({ [x]: changeCase[x] }))\n  .reduce((l, r) => ({ ...l, ...r }), {})\n\nexport type OperationKind = OperationTypeNode | 'fragment'\nexport interface OperationTemplateVariables {\n  operationName: string\n  operationKind: OperationKind\n}\n\nexport type TemplateVariables = OperationTemplateVariables\n\nexport const expandTemplate = <T extends TemplateVariables>(template: string, variables: T): string => {\n  const ast = (parse('`' + template.replace(/{/g, '${') + '`').body[0] as any).expression\n\n  const allVariables = {\n    ...fromEntries(\n      Object.entries(variables).map(([name, value]) => [\n        changeCase.pascalCase(name),\n        changeCase.pascalCase(value),\n      ])\n    ),\n    ...variables,\n  }\n\n  const result: string = evaluate(ast, {\n    ...casingOperations,\n    ...allVariables,\n  })\n  if (result.includes('[object Object]')) {\n    return ERRORS.invalidTemplate(template, allVariables, casingOperations)\n  }\n  return result\n}\n\nconst validateTemplate = (templates: string[], dummyVariables: TemplateVariables) => {\n  for (const template of templates) {\n    expandTemplate(template, dummyVariables)\n  }\n}\n\nexport const validateOperationsTemplate = (...templates: string[]) =>\n  validateTemplate(templates, {\n    operationKind: 'query',\n    operationName: 'validation',\n  })\n","export * from './plugin'\n","export * from './plugin'\nexport * from './parser'\nexport * from './printer'\n","import { PluginFunction, Types } from '@graphql-codegen/plugin-helpers'\nimport { concatAST, DocumentNode } from 'graphql'\n\nimport { OperationsParser } from './parser'\nimport { AllConfigOptions, PrinterConfig, OperationsMapPrinter } from './printer'\nimport { ReplaceReturnType } from '~/utils'\n\nexport interface OperationsMapPrinterConfig {\n  operationsMap: Partial<AllConfigOptions>\n}\n\nexport type Plugin = ReplaceReturnType<\n  PluginFunction<OperationsMapPrinterConfig>,\n  Types.Promisable<Types.ComplexPluginOutput>\n>\n\nexport const plugin: Plugin = (schema, rawDocuments, rawConfig) => {\n  try {\n    const config = new PrinterConfig(rawConfig.operationsMap)\n    config.validateConfig()\n\n    const documents = rawDocuments\n    const allAst = concatAST(\n      documents\n        .map(\n          v =>\n            v.document ||\n            // The next line is to make it work with older versions (<= v1.6.1) of @graphql-codegen\n            (v as any).content\n        )\n        .filter(x => !!x) as DocumentNode[]\n    )\n\n    const parser = new OperationsParser(allAst, schema)\n\n    const operationsMapPrinter = new OperationsMapPrinter(parser, config)\n\n    return operationsMapPrinter.allContent\n  } catch (err) {\n    console.log(err)\n    throw err\n  }\n}\n","import { DocumentNode, GraphQLSchema, TypeInfo } from 'graphql'\nimport { LazyGetter as Lazy } from 'lazy-get-decorator'\n\nimport { getFragments, getOperations } from './getDefinitions'\n\nexport class OperationsParser {\n  readonly typeInfo: TypeInfo\n  constructor(readonly allAst: DocumentNode, readonly schema: GraphQLSchema) {\n    this.typeInfo = new TypeInfo(schema)\n  }\n\n  @Lazy()\n  get allFragments() {\n    return getFragments(this.allAst)\n  }\n\n  @Lazy()\n  get allOperations() {\n    return getOperations(this.allAst)\n  }\n\n  @Lazy()\n  get allDefinitions() {\n    return [...this.allFragments, ...this.allOperations]\n  }\n}\n","import { ASTNode, print } from 'graphql'\n\nexport const ERRORS = {\n  anonymousOperation: (node: ASTNode) => {\n    throw new Error(`Anonymous operations are not allowed: ${print(node)}`)\n  },\n  failedToGetType: (node: ASTNode) => {\n    throw new Error(`Failed to get a type of the node: ${print(node)}`)\n  },\n  unexpected: (extra?: string) => {\n    throw new Error(`Unexpected error ocurred${extra ? `: ${extra}` : ''}`)\n  },\n  unexpectedParentOfSelectionSet: (parent: any) => {\n    throw new Error(`Unexpected parent of SelectionSet: ${JSON.stringify(parent?.kind || parent)}`)\n  },\n  bugInCode: (extra?: string) => {\n    throw new Error(`There is a bug in the code${extra ? `: ${extra}` : ''}`)\n  },\n  invalidTemplate: <V extends {}, O extends {}>(template: string, variables: V, casingOperations: O) => {\n    const errorMessage =\n      `Invalid variable or function name used in \"operationsMap\" template. ` +\n      `Given template: \"${template}\". ` +\n      `Allowed variables: \"${Object.keys(variables).join(', ')}\". ` +\n      `Allowed functions: \"${Object.keys(casingOperations).join(', ')}\". ` +\n      `Usage example: \"{pascalCase(operationName)}{pascalCase(operationKind)}Variables\"`\n    throw new Error(errorMessage)\n  },\n}\n","import merge from 'lodash.merge'\n\nexport type KeysObj<T extends string> = { [key in T]: null }\n\nexport const unionToArray = <T extends string>(obj: KeysObj<T>) => {\n  return Object.keys(obj)\n}\n\nexport const pickKeys = <T extends string & keyof O, O extends {}>(\n  obj: O,\n  keysObj: KeysObj<T>\n): Pick<O, T> => {\n  const keys = unionToArray<T>(keysObj)\n  const entries = Object.entries(obj)\n    .filter(([key]) => keys.includes(key))\n    .map(([key, value]) => ({ [key]: value }))\n  return merge({}, ...entries)\n}\n","import fromEntriesAny from 'object.fromentries'\n\nexport const fromEntries: <Key extends PropertyKey, Value>(\n  entries: Iterable<[Key, Value]>\n) => { [key in Key]: Value } = fromEntriesAny as any\n","module.exports = require(\"object.fromentries\");","import { validateOperationsTemplate } from './expandTemplate'\nimport merge from 'lodash.merge'\nimport { pickKeys, KeysObj } from '~/utils'\n\nexport interface OperationsMapConfig {\n  /**\n   * `operationTypeTemplate` value controls which name will be used\n   * to reference operations return data type (can also be imported from another file)\n   *\n   * in  the following example, `operationTypeTemplate` produces `VoteMutation` value:\n   *\n   * @example\n   *  export interface OperationsMap {\n   *     vote: {\n   *       operationType: Types.VoteMutation; // <--- controlled by operationTypeTemplate\n   *       variablesType: Types.VoteMutationVariables;\n   *       kind: \"mutation\";\n   *     };\n   *   }\n   * @default '{OperationName}{OperationKind}'\n   */\n  operationTypeTemplate: string\n  /**\n   * `variablesTypeTemplate` value controls which name will be used\n   * to reference variables type (can also be imported from another file)\n   *\n   * in  the following example, `variablesTypeTemplate` produces `VoteMutationVariables` value:\n   *\n   * @example\n   *  export interface OperationsMap {\n   *     vote: {\n   *       operationType: Types.VoteMutation;\n   *       variablesType: Types.VoteMutationVariables; // <--- controlled by variablesTypeTemplate\n   *       kind: \"mutation\";\n   *     };\n   *   }\n   * @default '{OperationName}{OperationKind}Variables'\n   */\n  variablesTypeTemplate: string\n  /**\n   * `operationKindTemplate` value controls what String Literal value will be given\n   * for the operation's `kind` type or what actual string value will be given for the\n   * `documentsMap` entry.\n   *\n   * in  the following example, `operationKindTemplate` produces `mutation` values:\n   *\n   * @example\n   *  export interface OperationsMap {\n   *     vote: {\n   *       operationType: Types.VoteMutation;\n   *       variablesType: Types.VoteMutationVariables;\n   *       kind: \"mutation\"; // <-- controlled by operationKindTemplate\n   *     };\n   *   }\n   *\n   *  export const documentsMap = {\n   *      vote: {\n   *        document: Types.VoteDocument,\n   *        kind: \"mutation\" as const // <-- controlled by operationKindTemplate\n   *      }\n   *  };\n   *\n   * @default '{operationKind}'\n   */\n  operationKindTemplate: string\n\n  /**\n   * configures whether to generate object `OperationsMap` interfaces\n   *\n   * @default true\n   */\n  withOperationsMap: boolean\n}\n\nexport interface DocumentsMapConfig {\n  /**\n   * `operationDocumentTemplate` value controls which name will be used\n   * to reference document object in the `documentsMap` entry.\n   *\n   * in  the following example, `operationDocumentTemplate` produces `VoteDocument` value:\n   *\n   * @example\n   *  export const documentsMap = {\n   *      vote: {\n   *        document: Types.VoteDocument, // <-- controlled by operationDocumentTemplate\n   *        kind: \"mutation\" as const\n   *      }\n   *  };\n   *\n   * @default '{OperationName}{OperationKind === \"Fragment\" ? \"FragmentDoc\" : \"Document\"}'\n   */\n  operationDocumentTemplate: string\n\n  /**\n   * configures whether to generate object `documentsMap` constant which can be used on\n   * the runtime.\n   *\n   * @default true\n   */\n  withDocumentsMap: boolean\n}\n\nexport interface TypesImportConfig {\n  /**\n   * If value is present (non undefined), then all types will be imported\n   * from another file, which is described by this template:\n   *\n   * `import * as ${importedTypesAlias} from '${importTypesFrom}'`\n   * @example\n   * import * as Types from \"./gqlTypes\";\n   * @default undefined\n   */\n  importTypesFrom: string | undefined\n  /**\n   * When values are imported from another file, `importedTypesAlias`\n   * describes what alias will be given for the namespace.\n   *\n   * The following template will be used:\n   *\n   * `import * as ${importedTypesAlias} from '${importTypesFrom}'`\n   * @example\n   * import * as Types from \"./gqlTypes\";\n   * @default 'Types'\n   */\n  importedTypesAlias: string\n}\n\nexport interface AllConfigOptions extends OperationsMapConfig, TypesImportConfig, DocumentsMapConfig {}\n\nexport const defaultConfig: AllConfigOptions = {\n  // Operations Map values:\n  operationTypeTemplate: '{OperationName}{OperationKind}',\n  variablesTypeTemplate: '{OperationName}{OperationKind}Variables',\n  operationKindTemplate: '{operationKind}',\n  withOperationsMap: true,\n\n  // Documents Map values:\n  withDocumentsMap: true,\n  operationDocumentTemplate: '{OperationName}{OperationKind === \"Fragment\" ? \"FragmentDoc\" : \"Document\"}',\n\n  // Import Types from values:\n  importedTypesAlias: 'Types',\n  importTypesFrom: undefined,\n}\n\nconst operationsMapConfigKeysObs: KeysObj<keyof OperationsMapConfig> = {\n  operationKindTemplate: null,\n  operationTypeTemplate: null,\n  variablesTypeTemplate: null,\n  withOperationsMap: null,\n}\n\nconst documentsMapConfigKeysObs: KeysObj<keyof (DocumentsMapConfig &\n  Pick<OperationsMapConfig, 'operationKindTemplate'>)> = {\n  operationDocumentTemplate: null,\n  withDocumentsMap: null,\n  operationKindTemplate: null,\n}\n\nconst typesImportConfigKeysObs: KeysObj<keyof TypesImportConfig> = {\n  importTypesFrom: null,\n  importedTypesAlias: null,\n}\n\nexport class PrinterConfig {\n  private readonly config: AllConfigOptions\n\n  constructor(rawConfig: Partial<AllConfigOptions> = {}) {\n    this.config = merge(defaultConfig, rawConfig)\n  }\n\n  get allOptions() {\n    return this.config\n  }\n\n  get operationMap() {\n    return this.pickConfigEntries(operationsMapConfigKeysObs)\n  }\n\n  get documentsMap() {\n    return this.pickConfigEntries(documentsMapConfigKeysObs)\n  }\n\n  get importTypes() {\n    const config = this.pickConfigEntries(typesImportConfigKeysObs)\n    const importRef = config.importTypesFrom ? `${config.importedTypesAlias}.` : ''\n    return { ...config, importRef }\n  }\n\n  validateConfig() {\n    const { operationKindTemplate, variablesTypeTemplate, operationTypeTemplate } = this.operationMap\n    validateOperationsTemplate(operationKindTemplate, variablesTypeTemplate, operationTypeTemplate)\n    validateOperationsTemplate(this.documentsMap.operationDocumentTemplate)\n  }\n\n  private pickConfigEntries = <T extends keyof AllConfigOptions>(pick: KeysObj<T>) =>\n    pickKeys<T, AllConfigOptions>(this.config, pick)\n}\n","module.exports = require(\"change-case\");","module.exports = require(\"esprima\");","module.exports = require(\"static-eval\");","import { expandTemplate, OperationTemplateVariables } from './expandTemplate'\nimport { PrinterConfig } from './config'\nimport { OperationsParser, DefinitionType } from '~/plugin'\nimport { Types } from '@graphql-codegen/plugin-helpers'\nimport { LazyGetter as Lazy } from 'lazy-get-decorator'\n\nconst emptyOutput: Types.ComplexPluginOutput = { content: '' }\n\nconst mergeOutputs = (separator = '\\n', ...outputs: Types.ComplexPluginOutput[]) => {\n  const content = outputs.map(x => x.content).join(separator)\n\n  let prepend: string[] = []\n  let append: string[] = []\n\n  for (const output of outputs) {\n    append = [...(output.append || []), ...append]\n    prepend = [...prepend, ...(output.prepend || [])]\n  }\n\n  return { prepend, append, content }\n}\n\nexport class OperationsMapPrinter {\n  constructor(readonly parser: OperationsParser, readonly config: PrinterConfig) {}\n\n  @Lazy()\n  get commonPrependItems(): Types.ComplexPluginOutput {\n    const { importTypesFrom, importedTypesAlias } = this.config.importTypes\n\n    const prepend = [importTypesFrom && `import * as ${importedTypesAlias} from '${importTypesFrom}'`].filter(\n      x => !!x\n    ) as string[]\n\n    return { content: '', prepend }\n  }\n\n  @Lazy()\n  get allContent(): Types.ComplexPluginOutput {\n    const { withDocumentsMap, withOperationsMap } = this.config.allOptions\n\n    return mergeOutputs(\n      '\\n\\n',\n      this.commonPrependItems,\n      withOperationsMap ? this.operationsMapInterface : emptyOutput,\n      withDocumentsMap ? this.documentsMap : emptyOutput\n    )\n  }\n\n  @Lazy()\n  get documentsMap(): Types.ComplexPluginOutput {\n    const names: { [kind in DefinitionType['kind']]: string } = {\n      fragment: 'fragmentsDocumentMap',\n      subscription: 'subscriptionsDocumentMap',\n      mutation: 'mutationsDocumentMap',\n      query: 'queriesDocumentMap',\n    }\n\n    const fields = Object.values(names)\n      .map(x => `...${x}`)\n      .join(',\\n  ')\n\n    const content = [\n      ...Object.entries(names).map(([kind, name]) =>\n        this.getDocumentsMap(name, kind as DefinitionType['kind'])\n      ),\n\n      `export const documentsMap = {\\n  ${fields}\\n}`,\n    ].join('\\n\\n')\n\n    return { content }\n  }\n\n  private getDocumentsMap = (constantName: string, definitionsKind: DefinitionType['kind']) => {\n    const { parser, config } = this\n    const { allDefinitions } = parser\n\n    const { operationDocumentTemplate, operationKindTemplate } = config.documentsMap\n    const { importRef } = config.importTypes\n\n    const definitions = allDefinitions.filter(x => x.kind === definitionsKind)\n\n    const fields = definitions\n      .map(definition => {\n        const variables: OperationTemplateVariables = {\n          operationName: definition.name,\n          operationKind: definition.kind,\n        }\n        const expand = (template: string) => expandTemplate(template, variables)\n\n        const fields = [\n          `document: ${importRef}${expand(operationDocumentTemplate)}`,\n          `kind: '${expand(operationKindTemplate)}' as const`,\n        ]\n\n        return `'${definition.name}': { ${fields.filter(x => !!x).join(', ')} }`\n      })\n      .join(',\\n  ')\n\n    return `export const ${constantName} = {\\n  ${fields}\\n}`\n  }\n\n  @Lazy()\n  get operationsMapInterface(): Types.ComplexPluginOutput {\n    const content = [\n      this.getOperationsMapInterface('FragmentsMap', 'fragment'),\n      this.getOperationsMapInterface('MutationsMap', 'mutation'),\n      this.getOperationsMapInterface('QueriesMap', 'query'),\n      this.getOperationsMapInterface('SubscriptionsMap', 'subscription'),\n      `export interface OperationsMap extends FragmentsMap, MutationsMap, QueriesMap, SubscriptionsMap { }`,\n    ].join('\\n\\n')\n\n    return { content }\n  }\n\n  private getOperationsMapInterface = (interfaceName: string, definitionsKind: DefinitionType['kind']) => {\n    const { parser, config } = this\n    const { importRef } = config.importTypes\n    const { allDefinitions } = parser\n    const { operationKindTemplate, operationTypeTemplate, variablesTypeTemplate } = config.operationMap\n\n    const definitions = allDefinitions.filter(x => x.kind === definitionsKind)\n\n    const fields = definitions\n      .map(definition => {\n        const variables: OperationTemplateVariables = {\n          operationName: definition.name,\n          operationKind: definition.kind,\n        }\n        const expand = (template: string) => expandTemplate(template, variables)\n\n        const fields = [\n          `operationType: ${importRef}${expand(operationTypeTemplate)}`,\n          `variablesType: ${\n            definition.kind === 'fragment' ? '{}' : importRef + expand(variablesTypeTemplate)\n          }`,\n          `kind: '${expand(operationKindTemplate)}'`,\n        ]\n\n        return `'${definition.name}': { ${fields.filter(x => !!x).join(', ')} }`\n      })\n      .join('\\n  ')\n\n    return `export interface ${interfaceName} {\\n  ${fields}\\n}`\n  }\n}\n"],"sourceRoot":""}